// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -destination=./../../tests/mocks/mock_repository.go -package=mocks -source=database.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entity "transaction-routine/internal/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockRepository) CreateAccount(ctx context.Context, acc entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, acc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRepositoryMockRecorder) CreateAccount(ctx, acc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRepository)(nil).CreateAccount), ctx, acc)
}

// CreateOperationType mocks base method.
func (m *MockRepository) CreateOperationType(ctx context.Context, op entity.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperationType", ctx, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOperationType indicates an expected call of CreateOperationType.
func (mr *MockRepositoryMockRecorder) CreateOperationType(ctx, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperationType", reflect.TypeOf((*MockRepository)(nil).CreateOperationType), ctx, op)
}

// CreateTransaction mocks base method.
func (m *MockRepository) CreateTransaction(ctx context.Context, tx entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockRepositoryMockRecorder) CreateTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockRepository)(nil).CreateTransaction), ctx, tx)
}

// FindAccounts mocks base method.
func (m *MockRepository) FindAccounts(ctx context.Context, filter entity.AccountFilter) ([]entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccounts", ctx, filter)
	ret0, _ := ret[0].([]entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccounts indicates an expected call of FindAccounts.
func (mr *MockRepositoryMockRecorder) FindAccounts(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccounts", reflect.TypeOf((*MockRepository)(nil).FindAccounts), ctx, filter)
}

// FindOperationType mocks base method.
func (m *MockRepository) FindOperationType(ctx context.Context) (entity.OperationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOperationType", ctx)
	ret0, _ := ret[0].(entity.OperationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOperationType indicates an expected call of FindOperationType.
func (mr *MockRepositoryMockRecorder) FindOperationType(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOperationType", reflect.TypeOf((*MockRepository)(nil).FindOperationType), ctx)
}

// FindTransactions mocks base method.
func (m *MockRepository) FindTransactions(ctx context.Context, filter entity.TransactionFilter) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactions", ctx, filter)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactions indicates an expected call of FindTransactions.
func (mr *MockRepositoryMockRecorder) FindTransactions(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactions", reflect.TypeOf((*MockRepository)(nil).FindTransactions), ctx, filter)
}

// Health mocks base method.
func (m *MockRepository) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockRepositoryMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockRepository)(nil).Health), ctx)
}

// UpdateTransaction mocks base method.
func (m *MockRepository) UpdateTransaction(ctx context.Context, tx entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockRepositoryMockRecorder) UpdateTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockRepository)(nil).UpdateTransaction), ctx, tx)
}
